generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["relationJoins"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
    MANAGER
    USER
}

model User {
    id       String    @id @default(cuid())
    name     String
    password String
    email    String    @unique
    image    String?
    accounts Account[]
    sessions Session[]

    // custom fields
    role         UserRole      @default(USER)
    reservations Reservation[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Bike {
    id       String @id @default(cuid())
    name     String
    model    String
    color    String
    location String

    averageRating Float   @default(0)
    available     Boolean @default(true)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    reservations Reservation[]
}

model Reservation {
    id        String   @id @default(cuid())
    startDate DateTime
    endDate   DateTime
    rating    Int?

    bike   Bike   @relation(fields: [bikeId], references: [id], onDelete: Cascade)
    bikeId String

    reservedBy   User   @relation(fields: [reservedById], references: [id], onDelete: Cascade)
    reservedById String

    @@unique([bikeId, startDate, endDate])
}
